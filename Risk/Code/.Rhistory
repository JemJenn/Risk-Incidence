library(calibrate)
library(scatterplot3d)
library(rgl)
library(mvtnorm)
generate_positions_cumulative_normal = function(n,mean_center_position,sd_size){
myseq <- seq(1/(2*n),1-1/(2*n),1/n)
positions<-qnorm( myseq,mean=mean_center_position,sd=sd_size )
return(positions)
}
install.packages
calibrat
e
install.packages('calibrate')
install.packages(rgl)
install.packages('rgl'')
asd
da
s
sa
dsa;d'lsad'l
install.packages('rgl')
install.packages('mvtnorm')
if(Sys.info()['login']=='eduardgrebe') {
setwd("~/dev/infection-dating-tool/manuscripts/figures/")
} else if(Sys.info()['login']=='JumpCo Vostro3700') {
setwd("C:/Users/JumpCo Vostro3700/infection-dating-tool/manuscripts/figures")
}else if(Sys.info()['login']=='jeremyb'){
setwd("H:\\infection-dating-tool\\manuscripts\\figures")
}else{
setwd(".") #what does this do?
}
library("DescTools")
library("shape")
generate_positions_for_individual_curves = function(n,scale,shape,mean_center_position,sd_size){
shift_to_half_likelihood = scale*(-1*log(1/2))^(1/shape)
myseq <- seq(1/(2*n),1-1/(2*n),1/n)
positions <- qnorm(myseq,mean=mean_center_position-shift_to_half_likelihood,sd=sd_size)
return(positions)
}
generate_positions_cumulative_normal = function(n,mean_center_position,sd_size){
myseq <- seq(1/(2*n),1-1/(2*n),1/n)
positions<-qnorm( myseq,mean=mean_center_position,sd=sd_size )
return(positions)
}
shift_to_half_likelihood_weibul <- function(scale,shape){
return(scale*(-1*log(1/2))^(1/shape))
}
individual_sensitivity_weibul <- function(times,scale,shape,delay){
return(sensitivity_weibul(x=times,scale=scale,shape=shape,position=delay-shift_to_half_likelihood_weibul(shape=shape,scale=scale)))
}
individual_negative_likelihood_weibul  <- function(times, scale, shape, delay, test_time){ #times is a vector of all the times we consider
return(1-sensitivity_weibul(x=test_time-times,scale=scale,shape=shape,position=delay-shift_to_half_likelihood_weibul(scale=scale,shape=shape)))
}
individual_positive_likelihood_weibul <- function(times, scale, shape, delay, test_time){
return (sensitivity_weibul(x=test_time-times,scale=scale,shape=shape,position=delay-shift_to_half_likelihood_weibul(scale=scale,shape=shape)))
}
family_negative_likelihood_weibul <- function(times, scale, shape, mean_delay, sd_size, n, test_time){ #could also list all parameters (with default values) and use if else to select particular sensitivity shape
list_of_positions <- generate_positions_cumulative_normal(n=n, mean_center_position=mean_delay, sd_size=sd_size)
set_of_negative_curves <- matrix(nrow=length(times),ncol=n)
for(i in seq(1,n)){
set_of_negative_curves[,i] <- individual_negative_likelihood_weibul(times=times,scale=scale,shape=shape,delay = list_of_positions[i],test_time=test_time)
}
return(set_of_negative_curves)
}
family_sensitivity_weibul <- function(times, scale, shape, mean_delay, sd_size, n){ #could also list all parameters (with default values) and use if else to select particular sensitivity shape
list_of_positions <- generate_positions_cumulative_normal(n=n, mean_center_position=mean_delay, sd_size=sd_size)
set_of_sensitivity_curves <- matrix(nrow=length(times),ncol=n)
for(i in seq(1,n)){
set_of_sensitivity_curves[,i] <- individual_sensitivity_weibul(times,scale,shape,list_of_positions[i])
}
return(set_of_sensitivity_curves)
}
sensitivity_weibul <- function(x,scale,shape,position){
return(ifelse(x-position<0,0,1-exp(-((x-position)/scale)^shape))) #Note that the zero in the ifelse implies that pre-infection test results are never positive.
#adjust to incorporate imperfect specificity JEREMY CHECK THIS
}
family_positive_likelihood_weibul <- function(times, scale, shape, mean_delay, sd_size, n, test_time){
list_of_positions = generate_positions_cumulative_normal(n=n, mean_center_position=mean_delay, sd_size=sd_size)
set_of_positive_curves <- matrix(nrow=length(times),ncol=n)
for(i in seq(1,n)){
set_of_positive_curves[,i] <- individual_positive_likelihood_weibul(times=times,scale=scale,shape=shape,delay = list_of_positions[i],test_time=test_time)
}
return(set_of_positive_curves)
}
generate_mean_of_family = function(family_of_curves){ #input should be a matrix
return(rowMeans(family_of_curves))
}
generate_product_curve = function(curve1,curve2){ #this obviously doesn't need to be its own function I'm just renaming it
return(curve1*curve2)
}
likelihood_by_DDI = function(set_of_positive_curves,set_of_negative_curves,times){
if(ncol(set_of_negative_curves) != ncol(set_of_positive_curves)) {stop ("Huh?? Why are there different numbers of curves?")}
if(nrow(set_of_negative_curves) != nrow(set_of_positive_curves)) {stop ("Huh?? Why are there different numbers of time steps?")}
likelihoods_per_time = rep(0,length(times))
for (tpos in seq(1:length(times))){
cumu_likely <- 0
for (curvenumber in seq(1:ncol(set_of_negative_curves))){ #chronological order makes a trivial difference - there is
#just a product per person
likelihood_forward <- set_of_positive_curves[tpos,curvenumber]*set_of_negative_curves[tpos,curvenumber]
likelihood_backward <- "The same thing unless I don't actually understand this task"
cumu_likely <- cumu_likely + likelihood_forward
}
likelihoods_per_time[tpos] <- cumu_likely / ncol(set_of_negative_curves)
}
return(likelihoods_per_time)
}
simple_plot_individual_time_likelihood <- function(n,times,set_of_positive_curves,
set_of_negative_curves,
set_of_positive_curves_background,
set_of_negative_curves_background,
time,test_of_interest,
col_negative = col_negative,
col_positive = col_positive,
col_likelihood = col_likelihood,
col_mean = col_mean,
col_dotted = col_dotted,
lwd_ind,
lwd_means,
lwd_likelihood,
curve_level_cutoff_probability,
plot_full_likelihood = FALSE){
positive_mean_naive = rowMeans(set_of_positive_curves_background)
negative_mean_naive = rowMeans(set_of_negative_curves_background)
likelihood_naive <- negative_mean_naive*positive_mean_naive
#position in timeaxis
time_position <- which(times==time)
#calculate_likelihood
cumu_likely=0
for (person in seq(1:ncol(set_of_negative_curves_background))){ #chronological order makes a trivial difference - there is
#just a product per person
likelihood_forward = set_of_positive_curves_background[time_position,person]*set_of_negative_curves_background[time_position,person]
likelihood_backward = "The same thing unless I don't actually understand this task"
cumu_likely <- cumu_likely + likelihood_forward
}
likelihood_DDI_at_time_given_both_test_results = 1/ncol(set_of_negative_curves_background) *cumu_likely
#plot the curves
plot(times,plotdata_negative[,1],type='c',xlim=c(times[1],times[length(times)]),ylim=c(-0.002,1.002),xlab='',ylab="",col=col_negative,xaxt='n',yaxt='n',xaxs='i',yaxs='i',bty='l')
# Time of Hypothetical DDI
# Likelihood of observed test results
#points(plotdata[,1],plotdata[,3])
# normalising factor
normalise_negative_test <- 0
normalise_positive_test <- 0
for (curve_number in seq(1:ncol(set_of_negative_curves))){
normalise_negative_test <- normalise_negative_test + set_of_negative_curves[time_position,curve_number]
normalise_positive_test <- normalise_positive_test + set_of_positive_curves[time_position,curve_number]
}
# normalise_negative_test <- normalise_negative_test/n
# normalise_positive_test <- normalise_positive_test/n
# print(normalise_negative_test)
# print(normalise_positive_test)
lwd_means <- 4
lwd_ind <- 1.37
lwd_likelihood <- lwd_means - 3
#col_negative <- "green" #rgb(27/255,158/255,119/255)
#col_positive <- "red" #rgb(217/255,95/255,2/255)
#col_mean <- rgb(231/255,41/255,138/255) #"blue" # rgb(231/255,41/255,138/255)
#col_likelihood <- "purple" #rgb(117/255,112/255,179/255)
#col_dotted <- rgb(3/7,3/7,3/7) #color for dotted lines
lines(timeaxis,positive_mean_naive,col=col_positive,lwd=lwd_means)
lines(timeaxis,negative_mean_naive,col=col_negative,lwd=lwd_means)
# col_negative <- 'green'
# col_positive <- 'red'
# col_likelihood <- 'purple'
#goto_do
## frame the dottedness as posteriors
## OR frame is as a direct probability statment
scale_t1= 4
shape_t1 = 1.73
mean_delay_t1 = 12
sd_size_t1 = 3
#   Time of negative test (relative to arbitrary t=0)
test_time_1 = 28
##                      TEST 2 (positive)
scale_t2 = scale_t1
shape_t2 = shape_t1
mean_delay_t2 = mean_delay_t1
sd_size_t2 = sd_size_t1
#   Time of positive test
test_time_2 = timeaxis[length(timeaxis)]-10
## Generate the individual likelihood curves for the first (negative) and second (positive) test
#Test 1
plotdata_negative = family_negative_likelihood_weibul(n=n, scale=scale_t1, shape=shape_t1, mean_delay=mean_delay_t1, sd_size= sd_size_t1, times = timeaxis, test_time = test_time_1)
#for generating mean curve
plotdata_negative_background <- family_negative_likelihood_weibul(n=n+50, scale=scale_t1, shape=shape_t1, mean_delay=mean_delay_t1, sd_size= sd_size_t1, times = timeaxis, test_time = test_time_1)
#Test 2
plotdata_positive = family_positive_likelihood_weibul(n=n, scale=scale_t2, shape=shape_t2, mean_delay=mean_delay_t2, sd_size= sd_size_t2, times = timeaxis, test_time = test_time_2)
#for generating mean curve
plotdata_positive_background <- family_positive_likelihood_weibul(n=n+50, scale=scale_t2, shape=shape_t2, mean_delay=mean_delay_t2, sd_size= sd_size_t2, times = timeaxis, test_time = test_time_2)
#title(xlab="Time", line=1.5, cex.lab=1.2)
title(ylab=expression("Likelihood"), line=2, cex.lab=1.05)
#expression(atop("Histogram of "*hat(mu), Bootstrap~samples*','~Allianz))
yaxis_pos <- c(0,1)
yaxis_names <- c('0','1')
axis(side=2, at=yaxis_pos, labels= yaxis_names,tck=-0.037, padj=.17)
segments(x0=test_time_1,y0=0,x1=test_time_1,y1=1,lty=3)
segments(x0=test_time_2,y0=0,x1=test_time_2,y1=1,lty=3)
if (!plot_full_likelihood){
if(test_of_interest=="negative"){
for (curve in seq(1:ncol(set_of_negative_curves))){
if(!(set_of_negative_curves[time_position,curve]==0)&&!(set_of_positive_curves[time_position,curve]==0)&&(is.nan(set_of_negative_curves[time_position,curve]/normalise_negative_test) | is.nan(set_of_positive_curves[time_position,curve]/normalise_positive_test))){print("NaN Error! at",time,curve)}
# print(set_of_negative_curves[time_position,curve]/normalise_negative_test)
if (!(set_of_negative_curves[time_position,curve]==0) && set_of_negative_curves[time_position,curve]/normalise_negative_test>curve_level_cutoff_probability){
lines(times,set_of_positive_curves[,curve],col=col_positive, lwd=lwd_ind) #what color should the positive curves be
lines(times,set_of_negative_curves[,curve],col=col_negative, lwd=lwd_ind)
}else{
lines(times,set_of_positive_curves[,curve],col=col_positive,lty=3,lwd=lwd_ind) #what color should the positive curves be
lines(times,set_of_negative_curves[,curve],col=col_negative,lty=3,lwd=lwd_ind)
}
}}
else if(test_of_interest=="positive"){
for (curve in seq(1:ncol(set_of_negative_curves))){
if (!(set_of_positive_curves[time_position,curve]==0) &&set_of_positive_curves[time_position,curve]/normalise_positive_test>curve_level_cutoff_probability){
lines(times,set_of_positive_curves[,curve],col=col_positive,lwd=lwd_ind) #what color should the positive curves be
lines(times,set_of_negative_curves[,curve],col=col_negative,lwd=lwd_ind)
}else{
lines(times,set_of_positive_curves[,curve],col=col_positive,lty=3,lwd=lwd_ind) #what color should the positive curves be
lines(times,set_of_negative_curves[,curve],col=col_negative,lty=3,lwd=lwd_ind)
}
}
}
points(cex=1.5,pch=19,times[time_position],likelihood_by_DDI(set_of_positive_curves = set_of_positive_curves_background ,set_of_negative_curves = set_of_negative_curves_background,times=times)[time_position])#,lwd=lwd_likelihood,col=col_likelihood)
# prettify_plot this is messy I know. it makes the gif-generation a bit easier
xaxis_pos <- c(time,test_time_1,test_time_2)
xaxis_names <- c(expression('t'['inf']),expression('t'['1']*'(-)'),expression('t'['2']*'(+)'))
axis(side=1, at=xaxis_pos, labels= xaxis_names,padj=-.35,hadj=-.037)
# axis(side=1, at=zero_pos, labels=zero_name,padj=-0.45,hadj=0.37)
#positive_mean_background <- rowMeans(plotdata_positive_background)
#negative_mean_background <- rowMeans(plotdata_negative_background)
#lines(timeaxis,negative_mean_background, lwd=lwd_means, col=col_negative)      ##taking these out cause I included them in the "simple plot" function
#lines(timeaxis,positive_mean_background, lwd=lwd_means, col=col_positive)
segments(x0=time, y0=0, x1=time,y1=1,lty=2,lwd = 2) }
else{
xaxis_pos <- c(test_time_1,test_time_2)
xaxis_names <- c(expression('t'['1']*'(-)'),expression('t'['2']*'(+)'))
axis(side=1, at=xaxis_pos, labels= xaxis_names,padj=-.35,hadj=-.037)
for(curve in seq(1:ncol(set_of_negative_curves))){
lines(times,set_of_positive_curves[,curve],col=col_positive, lwd=lwd_ind) #what color should the positive curves be
lines(times,set_of_negative_curves[,curve],col=col_negative, lwd=lwd_ind)
}
# WARNING: THIS IS NOT THE TRUE LIKELIHOOD AND WILL BE WRONG FOR OTHER FIGURES
lines(times,likelihood_naive,lwd=4)
}
}
n=10
mean_delay_t1=25
plot_individual_time_likelihood = function(n,times,set_of_positive_curves,set_of_negative_curves,time, test_of_interest){ #times is all times, ie timeaxis, time is particular time of interest
#calculate means
positive_mean_naive = rowMeans(set_of_positive_curves)
negative_mean_naive = rowMeans(set_of_negative_curves)
likelihood_naive <- negative_mean_naive*positive_mean_naive
#position in timeaxis
time_position <- which(times==time)
#calculate_likelihood
cumu_likely=0
for (person in seq(1:ncol(set_of_negative_curves))){ #chronological order makes a trivial difference - there is
#just a product per person
likelihood_forward = set_of_positive_curves[time_position,person]*set_of_negative_curves[time_position,person]
likelihood_backward = "The same thing unless I don't actually understand this task"
cumu_likely <- cumu_likely + likelihood_forward
}
likelihood_DDI_at_time_given_both_test_results = 1/ncol(set_of_negative_curves) *cumu_likely
#plot the curves
plot(times,plotdata_negative[,1],type='c',xlim=c(times[1],times[length(times)]),ylim=c(-0.002,1.002),xlab="Hypothetical DDI (days)",ylab="Likelihood of observed test results",col='green')
#points(plotdata[,1],plotdata[,3])
if(test_of_interest=="negative"){
for (curve in seq(1:ncol(set_of_negative_curves))){
if (!(set_of_negative_curves[time_position,curve]==0) && set_of_negative_curves[time_position,curve]>0.5){
lines(times,set_of_positive_curves[,curve],col='red', lwd=1.2) #what color should the positive curves be
lines(times,set_of_negative_curves[,curve],col='green', lwd=1.2)
}else{
lines(times,set_of_positive_curves[,curve],col='red',lty=2,lwd=1.2) #what color should the positive curves be
lines(times,set_of_negative_curves[,curve],col='green',lty=2,lwd=1.2)
}
}}
else if(test_of_interest=="positive"){
for (curve in seq(1:ncol(set_of_negative_curves))){
if (!(set_of_negative_curves[time_position,curve]==0) && set_of_positive_curves[time_position,curve]>0.5){
lines(times,set_of_positive_curves[,curve],col='red',lwd=1.2) #what color should the positive curves be
lines(times,set_of_negative_curves[,curve],col='green',lwd=1.2)
}else{
lines(times,set_of_positive_curves[,curve],col='red',lty=2,lwd=1.2) #what color should the positive curves be
lines(times,set_of_negative_curves[,curve],col='green',lty=2,lwd=1.2)
}
}
}
lines(times,positive_mean_naive,lwd=2,col='red')
lines(times,negative_mean_naive,lwd=2,col='green')
lines(times,likelihood_naive, lwd=4,col='grey') ### todo: transparency? or thin/thick lines? some way to clarify
points(time,likelihood_DDI_at_time_given_both_test_results)
}
mean_delay_t2=35       #we have a second test listed so that we can easily swap between them when generating the sensitivity curves
sd_size_t1 = 5
sd_size_t2 = sd_size_t1
detail = 10 # 1/Step size
timeaxis = seq(0,100,1/detail)
scale_t1= 3
shape_t1 = 2
col_negative <- rgb(27/255,158/255,119/255)
donation_time <- 150
set_of_infectious_curves <- matrix(nrow=length(times),ncol=n)
timeaxis <- seq(0,200,1)
set_of_infectious_curves <- matrix(nrow=length(timeaxis),ncol=n)
for(i in seq(1,n)){
set_of_infectious_curves[,i] <- individual_negative_likelihood_weibul(times=times,scale=scale,shape=shape,delay = infectious_positions[i],test_time=donation_time)
}
set_of_infectious_curves <- matrix(nrow=length(timeaxis),ncol=n)
for(i in seq(1,n)){
set_of_infectious_curves[,i] <- individual_negative_likelihood_weibul(times=timeaxis,scale=scale,shape=shape,delay = infectious_positions[i],test_time=donation_time)
}
infectious_positions <- generate_positions_cumulative_normal(n,mean_center_position,sd_size)
mean_center_position <- 100
donation_time <- 150
sd_size <- 2
infectious_positions <- generate_positions_cumulative_normal(n,mean_center_position,sd_size)
detectable_positions <- infections_positions - 14
detectable_positions <- infectious_positions - 14
set_of_infectious_curves <- matrix(nrow=length(timeaxis),ncol=n)
for(i in seq(1,n)){
set_of_infectious_curves[,i] <- individual_negative_likelihood_weibul(times=timeaxis,scale=scale,shape=shape,delay = infectious_positions[i],test_time=donation_time)
}
infectiousness_shape <- 2
infectiousness_scale <- 1
detectability_shape <- 5
detectability_scale <- 5
infectious_positions <- generate_positions_cumulative_normal(n,mean_center_position,sd_size)
detectable_positions <- infectious_positions - 14
set_of_infectious_curves <- matrix(nrow=length(timeaxis),ncol=n)
for(i in seq(1,n)){
set_of_infectious_curves[,i] <- individual_negative_likelihood_weibul(times=timeaxis,scale=scale,shape=shape,delay = infectious_positions[i],test_time=donation_time)
}
set_of_infectious_curves <- matrix(nrow=length(timeaxis),ncol=n)
for(i in seq(1,n)){
set_of_infectious_curves[,i] <- individual_negative_likelihood_weibul(times=timeaxis,scale=infectiousness_scale,shape=infectiousness_shape,delay = infectious_positions[i],test_time=donation_time)
}
set_of_detectable_curves <- matrix(nrow=length(timeaxis),ncol=n)
for(i in seq(1,n)){
set_of_detectable_curves[,i] <- individual_positive_likelihood_weibul(times=timeaxis,scale=detectability_scale,shape=detectability_shape,delay = detectable_positions[i],test_time=donation_time)
}
set_of_infectious_curves <- matrix(nrow=length(timeaxis),ncol=n)
for(i in seq(1,n)){
set_of_infectious_curves[,i] <- individual_negative_likelihood_weibul(times=timeaxis,scale=infectiousness_scale,shape=infectiousness_shape,delay = infectious_positions[i],test_time=donation_time)
}
set_of_detectable_curves <- matrix(nrow=length(timeaxis),ncol=n)
for(i in seq(1,n)){
set_of_detectable_curves[,i] <- individual_positive_likelihood_weibul(times=timeaxis,scale=detectability_scale,shape=detectability_shape,delay = detectable_positions[i],test_time=donation_time)
}
plot(timeaxis,set_of_detectable_curves[,1],type='l',xlim=c(timeaxis[1],timeaxis[length(timeaxis)]),ylim=c(-.002,1.002),xaxt='n',yaxt='n',xaxs='i',yaxs='i',bty='l',xlab='',ylab='',col='green') #clarify label in comment
yaxis_pos <- c(0,0.5,1)
yaxis_names <- c('0',"",'1')
xaxis_pos <- c(donation_time)
xaxis_names <- c(expression('donation time'))
zero_pos <- c(0)
zero_name <- c(expression('0'['']))
axis(side=2, at=yaxis_pos, labels= yaxis_names,tck=-0.037, padj=.437)
axis(side=1, at=xaxis_pos, labels= xaxis_names,padj=-.35,hadj=-.137)
for (i in seq(1:n)){
lines(timeaxis,set_of_detectable_curves[,i],col=col_negative,lwd=lwd_ind)
}
for (i in seq(1:n)){
lines(timeaxis,set_of_detectable_curves[,i],col=col_negative,lwd=2)
}
for (i in seq(1:n)){
lines(timeaxis,set_of_infectious_curves[,i],col=col_positive,lwd=2)
}
for (i in seq(1:n)){
lines(timeaxis,set_of_infectious_curves[,i],col=3,lwd=2)
}
